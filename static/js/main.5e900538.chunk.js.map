{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","data","setData","num","setNum","counted","setCount","totalAge","setTotalAge","average","setAverage","update","accumulator","entry","age","resource","byear","Number","birthDate","substring","bmonth","bday","today","Date","getFullYear","getMonth","getDate","getName","n","name","prefix","text","given","family","useEffect","fetch","then","response","json","length","t","reduce","toFixed","class","map","i","gender","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0NA4GeA,MAzGf,WAEE,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAsBF,mBAAS,GAA/B,mBAAOG,EAAP,KAAYC,EAAZ,KACA,EAA4BJ,mBAAS,GAArC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAAgCN,mBAAS,GAAzC,mBAAOO,EAAP,KAAiBC,EAAjB,KACA,EAA8BR,mBAAS,GAAvC,mBAAOS,EAAP,KAAgBC,EAAhB,KAEA,SAASC,EAAOC,EAAaC,GAC3B,IAAIC,EAAM,EACNT,EAAU,EACd,GAAI,cAAeQ,EAAME,SAAU,CACjC,IAAIC,EAAQC,OAAOJ,EAAME,SAASG,UAAUC,UAAU,EAAG,IACrDC,EAASH,OAAOJ,EAAME,SAASG,UAAUC,UAAU,EAAG,IAAM,EAC5DE,EAAOJ,OAAOJ,EAAME,SAASG,UAAUC,UAAU,EAAG,KACpDG,EAAQ,IAAIC,KAChBT,EAAMQ,EAAME,cAAgBR,EAAQ,GAChCM,EAAMG,WAAaL,GAAWE,EAAMG,aAAeL,GAAUE,EAAMI,WAAaL,IAClFP,IAEFT,IAEF,MAAO,CAACO,EAAY,GAAKE,EAAKF,EAAY,GAAKP,GAGjD,SAASsB,EAAQZ,GACf,IAAIa,EAAI,GACR,GAAI,SAAUb,EAAU,CACtB,IAAIc,EAAOd,EAASc,KAAK,GAkBzB,MAjBI,WAAYA,IACdD,GAAKC,EAAKC,OAAO,GAAK,KAEpB,SAAUD,EACZD,GAAKC,EAAKE,MAGN,UAAWF,IACbD,GAAKC,EAAKG,MAAM,GACZ,WAAYH,IACdD,GAAK,MAGL,WAAYC,IACdD,GAAKC,EAAKI,SAGPL,EAET,MAAO,MAoBT,OAjBAM,qBAAU,WACRC,MAAM,+DACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAnC,GAAI,OAAIC,EAAQD,EAAKY,YAC5B,IAEHqB,qBAAU,WACR9B,EAAOH,EAAKsC,QACZ,IAAIC,EAAIvC,EAAKwC,OAAO9B,EAAQ,CAAC,EAAG,IAChCH,EAAYgC,EAAE,IACdlC,EAASkC,EAAE,MACV,CAACvC,IAEJiC,qBAAU,WACRxB,GAAYH,EAAWF,GAASqC,QAAQ,MACvC,CAACrC,EAASE,IAGX,gCACE,8BACA,oBAAIoC,MAAM,SAAV,mDAEA,gCACE,qBAAIA,MAAM,SAAV,6BAAoCxC,KACpC,qBAAIwC,MAAM,SAAV,0BAAiClC,QAEnC,8BACE,wBAAOkC,MAAM,QAAb,UACE,gCACA,+BACE,wCACA,sCACA,0CACA,6CAGF,gCAEE1C,EAAK2C,KAAI,SAAC/B,EAAOgC,GAAR,OACP,+BACE,6BAAKA,EAAI,IACT,6BAAKlB,EAAQd,EAAME,YACnB,6BAAK,cAAeF,EAAME,SAAWF,EAAME,SAASG,UAAY,QAChE,6BAAK,WAAYL,EAAME,SAAWF,EAAME,SAAS+B,OAAS,UAJjDD,iBCjFVE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.5e900538.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport './App.css'\r\n\r\nfunction App() {\r\n\r\n  const [data, setData] = useState([]); // All entries from the site\r\n  const [num, setNum] = useState(0); // Number of entries from the site\r\n  const [counted, setCount] = useState(0); // Number of entries with a birthdate\r\n  const [totalAge, setTotalAge] = useState(0); // Total age of entries\r\n  const [average, setAverage] = useState(0); // Average age of entries\r\n\r\n  function update(accumulator, entry) { // Calculates the age of each entry\r\n    var age = 0;\r\n    var counted = 0;\r\n    if (\"birthDate\" in entry.resource) { // Check if entry has a birthdate\r\n      var byear = Number(entry.resource.birthDate.substring(0, 4));\r\n      var bmonth = Number(entry.resource.birthDate.substring(5, 7)) - 1;\r\n      var bday = Number(entry.resource.birthDate.substring(8, 10));\r\n      var today = new Date();\r\n      age = today.getFullYear() - byear - 1; // Check if most recent birthdate has passed\r\n      if (today.getMonth() > bmonth || (today.getMonth() === bmonth && today.getDate() >= bday)) {\r\n        age++;\r\n      }\r\n      counted++; // Increment the number of entries with a birthdate\r\n    }\r\n    return [accumulator[0] + age, accumulator[1] + counted]; // Returns [totalAge, counted]\r\n  }\r\n\r\n  function getName(resource) { // Retrieves a patient's name\r\n    var n = \"\";\r\n    if (\"name\" in resource) {\r\n      var name = resource.name[0];\r\n      if (\"prefix\" in name) { // Always adds prefix\r\n        n += name.prefix[0] + \" \";\r\n      }\r\n      if (\"text\" in name) { // Prioritizes text over given + family name\r\n        n += name.text;\r\n      }\r\n      else {\r\n        if (\"given\" in name) {\r\n          n += name.given[0];\r\n          if (\"family\" in name) {\r\n            n += \" \";\r\n          }\r\n        }\r\n        if (\"family\" in name) {\r\n          n += name.family;\r\n        }\r\n      }\r\n      return n;\r\n    }\r\n    return \"N/A\"\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetch('https://hapi.fhir.org/baseR4/Patient?_pretty=true&_count=30')\r\n      .then(response => response.json())\r\n      .then(data => setData(data.entry))\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    setNum(data.length);\r\n    var t = data.reduce(update, [0, 0]);\r\n    setTotalAge(t[0]);\r\n    setCount(t[1])\r\n  }, [data])\r\n\r\n  useEffect(() => {\r\n    setAverage((totalAge / counted).toFixed(2));\r\n  }, [counted, totalAge])\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n      <h1 class=\"center\">SeamlessMD Richard Huang Assignment</h1>\r\n      </div>\r\n      <div>\r\n        <h3 class=\"center\">Total Patients: {num}</h3>\r\n        <h3 class=\"center\">Average Age: {average}</h3>\r\n      </div>\r\n      <div>\r\n        <table class=\"table\">\r\n          <thead>\r\n          <tr>\r\n            <th>Number</th>\r\n            <th>Name</th>\r\n            <th>Birthday</th>\r\n            <th>Gender</th>\r\n          </tr>\r\n          </thead>\r\n          <tbody>\r\n            {\r\n            data.map((entry, i) => (\r\n              <tr key = {i}>\r\n                <td>{i + 1}</td>\r\n                <td>{getName(entry.resource)}</td>\r\n                <td>{\"birthDate\" in entry.resource ? entry.resource.birthDate : \"N/A\"}</td>\r\n                <td>{\"gender\" in entry.resource ? entry.resource.gender : \"N/A\"}</td>\r\n              </tr>\r\n            ))\r\n            }\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}